import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
import json
import time

def training(min_max,parameter):
    # Replace 'filename.json' with the path to your JSON file
    file_path = r'final_year_project\config\training_data.json'

    # Opening the JSON file and loading the data
    with open(file_path, 'r') as file:
        data = json.load(file)
        
    df = pd.DataFrame(data)

    features = df[[
        'Abortionlaw',
        'Agriculturesubsidies',
        'Airlinetax',
        'Alcoholtax',
        'Artssubsidies',
        'Bantobacco',
        'Bodycameras',
        'Bordercontrols',
        'Buslanes',
        'Bussubsidies',
        'Cctvcameras',
        'Capitalgainstax',
        'Caremmissionslimits',
        'Cartax',
        'Charitytaxrelief',
        'Childbenefit',
        'Citizenshiptests',
        'Cleanenergysubsidies',
        'Communitypolicing',
        'Compulsoryfoodlabelling',
        'Compulsoryschoolsports',
        'Consumerrights',
        'Corporationtax',
        'Creationism',
        'Disabilitybenefit',
        'Divertedprofitstax',
        'Executivetermlimit',
        'Executivetermlength',
        'Familyplanning',
        'Femalegenitalmutilationban',
        'Foodstandards',
        'Foreignaid',
        'Foreigninvestortaxbreaks',
        'Freebuspasses',
        'Freeschoolmeals',
        'Gambling',
        'Gamehunting',
        'Gaymarriage',
        'Genderdiscriminationact',
        'Gendertransition',
        'Graduatetax',
        'Handgunlaws',
        'Hybridcarsinitiative',
        'Incometax',
        'Inheritancetax',
        'Intellectualpropertyrights',
        'Judiciaryindependence',
        'Junkfoodtax',
        'Jurytrial',
        'Labordaybankholiday',
        'Labourlaws',
        'Legalaid',
        'Maternityleave',
        'Militaryspending',
        'Minimumwage',
        'Narcotics',
        'Nuclearfission',
        'Nuclearweapons',
        'Organdonation',
        'Payrolltax',
        'Petroltax',
        'Plasticbagtax',
        'Pollutioncontrols',
        'Pressfreedom',
        'Prisonertagging',
        'Propertytax',
        'Publiclibraries',
        'Racediscriminationact',
        'Recycling',
        'Retirementage',
        'Roadbuilding',
        'Salestax',
        'Sciencefunding',
        'Selectiveschooling',
        'Smartmeterprogram',
        'Socialcare',
        'Statebroadcaster',
        'Statehealthservice',
        'Stateschools',
        'Stemcells',
        'Adulteducationsubsidies',
        'Alcoholawarenesscampaign',
        'Alcohollaw',
        'Alcoholawarenesscampaign',
        'Antibioticsban',
        'Anticorruptionagency',
        'Armedpolice',
        'Automationtax',
        'Bancoal',
        'Bandivorce',
        'Banforeignchurchservice',
        'Banhomosexuality',
        'Banlowmpgcars',
        'Banprivateeducation',
        'Banprivatehealthcare',
        'Bansecondhomeownership',
        'Bansundayshopping',
        'Bicyclesubsidies',
        'Biofuelsubsidies',
        'Borderwall',
        'Businessstartupcampaign',
        'Capceopaymultiplier',
        'Capitalcontrols',
        'Carboncaptureandstorage',
        'Carbontax',
        'Carpoolingcampaign',
        'Childcareprovision',
        'Cityfarms',
        'Cleanfuelsubsidy',
        'Climatechangeadaptionfund',
        'Closeairportscompletely',
        'Compulsorychurchattendance',
        'Compulsoryforeignlanguageclasses',
        'Compulsorylanguagelessons',
        'Compulsoryworkfortheunemployed',
        'Congestioncharging',
        'Curfews',
        'Cyberbullyingawarenesscampaign',
        'Cyclingcampaign',
        'Deathpenalty',
        'Detentionwithouttrial',
        'Diplomaticservice',
        'Diversityquotasforcompanies',
        'Driverlesscarlaws',
        'Dronestrikeact',
        'Drugenforcement',
        'Drugtreatment',
        'Ecohomeregulations',
        'Electriccarsinitiative',
        'Emptyhomestax',
        'Enterpriseinvestmentscheme',
        'Faithschoolsubsidies',
        'Financialtransactionstax',
        'Flagsoneverystreetcorner',
        'Flattax',
        'Foodstamps',
        'Foreigninvestmentrestrictions',
        'Freeeyetests',
        'Freeparentingclasses',
        'Frequentflyertax',
        'Fuelefficiency',
        'Gatedcommunities',
        'Generalmediacensorship',
        'Governmentsubsidiesforunions',
        'Greenelectronicsinitiative',
        'Healthcarevouchers',
        'Healthfoodsubsidies',
        'Healthtaxcredits',
        'Healthyeatingcampaign',
        'Helicoptermoney',
        'Humancloningresearchgrants',
        'Idcards',
        'Importtarrifs',
        'Intelligenceservices',
        'Internationalfusionresearchproject',
        'Internetcensorship',
        'Internetcurrencytaxation',
        'Internettax',
        'Keepthecountrytidycampaign',
        'Legaliseprostitution',
        'Limitautomatedtrading',
        'Limitorbancarsincities',
        'Luxurygoodstax',
        'Mandatorymicrochipimplant',
        'Mandatorymicrogeneration',
        'Mansiontax',
        'Marriedtaxallowance',
        'Marsprogram',
        'Microgenerationgrants',
        'Monorail',
        'Mortgagetaxrelief',
        'Nationalanthematstartofnews',
        'Nationalanthemsinschool',
        'Nationalarmedforcesweek',
        'Nationalbusinesscouncil',
        'Nationalservice',
        'Needleexchangeprogram',
        'Newcarsubsidies',
        'Oildrillingsubsidy',
        'Onechildpolicy',
        'Organicsubsidy',
        'Phonetapping',
        'Policedrones',
        'Prisonervoting',
        'Privateprisons',
        'Proportionalfines',
        'Publicreligiousbroadcasts',
        'Publictaxreturns',
        'Punitivetaxonsuperstores',
        'Punitivewealthtax',
        'Quantitativeeasing',
        'Racialprofiling',
        'Rareearthrefinement',
        'Recreationaldrugstax',
        'Reforestation',
        'Rentcontrols',
        'Righttodie',
        'Righttoprivacy',
        'Roboticsresearch',
        'Rubberbullets',
        'Ruraldevelopmentgrants',
        'Sateliteroadpricing',
        'Schoolbuses',
        'Schoolprayers',
        'Schooltaxcredits',
        'Schoolvouchers',
        'Secretcourts',
        'Smallbusinessgrants',
        'Socialjusticefoundation',
        'Capitalism_popularity',
        'Isolationism_popularity',
        'Nationalism_popularity',
        'Centrism_popularity',
        'Liberalism_popularity',
        'Internationalism_popularity',
        'Male_Supremacy_Advocates_popularity',
        'Traditional_Law_and_Order_advocates_popularity',
        'Centrism_popularity',
        'Feminism_popularity',
        'Communism_popularity',
        'Socialism_popularity',
        'Democratic_Socialism_popularity',
        'Social_Democracy_popularity',
        'Progressive_popularity',
        'Liberalism_popularity',
        'Secularism_popularity',
        'Fiscal_Conservatism_popularity',
        'Conservatism_popularity',
        'Libertarian_Capitalism_popularity',
        'Neoliberalism_popularity',
        'Laissez_faire_Capitalism_popularity',
        'Totalitarianism_popularity',
        'Elitism_popularity',
        'Religious_Fundamentalism_popularity',
        'Nationalism_popularity',
        'Liberalism_popularity',
        'Progressivism_popularity',
        'Libertarianism_popularity',
        'Anarchism_popularity',
        'Environmentalism_popularity',
        'Technological_Optimism_popularity',
        'Industrialism_popularity',
        'Altruism_popularity',
        'Collectivism_popularity',
        'Centrism_popularity',
        'Individualism_popularity',
        'Egoism_popularity',
        'Populism_popularity',
        'Free_Trade_Advocates_popularity',
        'Protectionism_popularity',
        'Economic_Nationalism_popularity',
        'Postmodernism_popularity',
        'Modernism_popularity',
        'Scientific_Progressivism_popularity',
        'Cultural_Traditionalism_popularity',
        'Traditionalism_popularity',
        'EthnicMinorities_popularity',
        'Cultural_Relativism_popularity',
        'Globalization_supporters_popularity',
        'International_Cooperation_Advocates_popularity',
        'Patriotic_movements_popularity',
        'National_Security_Advocates_popularity',
        'Patriotic_Education_Advocates_popularity',
        'AntiCorruption_movements_popularity',
        'Labor_Movements_popularity',
        'Social_Welfare_Advocates_popularity',
        'Educational_Equity_Advocates_popularity',
        'Universal_Healthcare_Advocates_popularity',
        'Market_Reform_Advocates_popularity',
        'Tax_Reform_advocates_popularity',
        'Redistribution_Advocates_popularity',
        'Economic_Equality_Advocates_popularity',
        'Housing_Equity_Advocates_popularity',
        'Economic_Stimulus_Advocates_popularity',
        'Global_Climate_Advocates_popularity',
        'Animal_Rights_Advocates_popularity',
        'Climate_Advocates_popularity',
        'Sustainable_Agriculture_Advocates_popularity',
        'Human_Rights_movements_popularity',
        'Democracy_advocates_popularity',
        'Civil_Liberties_Advocates_popularity',
        'Social_Justice_Advocates_popularity',
        'Social_Equality_Advocates_popularity',
        'Individual_Rights_Advocates_popularity',
        'Privacy_advocates_popularity',
        'Open_Source_Advocates_popularity',
        'Cryptocurrency_Advocates_popularity',
        'Digital_Freedom_Advocates_popularity',
        'Digital_Economy_Advocates_popularity',
        'Free_Internet_Advocates_popularity',
        'Community_movements_popularity',
        'Peace_movements_popularity',
        'Consumer_Rights_advocates_popularity',
        'Science_education_advocates_popularity',
        'Free_Market_Advocates_popularity',
        'Free_Trade_Advocates_popularity',
        'Regulation_Advocates_popularity',
        'Gun_Rights_Advocates_popularity',
        'Drug_Reform_Advocates_popularity',
        'Law_and_Order_Advocates_popularity',
        'Anti_Militarism_Advocates_popularity',
        'Harm_Reduction_Advocates_popularity',
        'Hardline_Drug_Policy_Advocates_popularity',
        'Anti_Nuclear_Advocates_popularity',
        'Medical_Ethics_Advocates_popularity',
        'Health_movements_popularity',
        'Housing_rights_activists_popularity',
        'Public_Transport_Advocates_popularity',
        'Homeownership_Advocates_popularity',
        'Privacy_Advocates_popularity',
        'Human_Rights_Advocacy_popularity',
        'Wealth_Preservation_Advocates_popularity',
        'Urban_Development_Advocates_popularity',
        'Free_Speech_Advocates_popularity',
        'Religious_popularity',
        'Young_popularity',
        'Patriot_popularity',
        'Parents_popularity',
        'Middle_Class_popularity',
        'Poor_popularity',
        'Wealthy_popularity',
        'Commuter_popularity',
        'Motorist_popularity',
        'Academic_popularity',
        'Blue_Collar_Worker_popularity',
        'Farmers_popularity',
        'Grey_Collar_Worker_popularity',
        'Retired_popularity',
        'Self_Employed_popularity',
        'State_Employees_popularity',
        'Student_popularity',
        'Unemployed_popularity',
        'White_Collar_Worker_popularity',
        'ImmigrationDemand',
        'Globalco2',
        'HighIncome',
        'LowIncome',
        'middleincome',
        'Terrorism',
        'Airtravel',
        'Alcoholconsumption',
        'AverageTemperature',
        'BusinessConfidence',
        'Bususage',
        'ElectricCarTransition',
        'Carusage',
        'Charity',
        'Co2emissions',
        'Corruption',
        'Crimerate',
        'RacialTension',
        'Democracy',
        'Education',
        'Emigration',
        'Energyefficiency',
        'Environment',
        'Equality',
        'FoodPrice',
        'Currencystrength',
        'Foreignaidreceived',
        'Foreigninvestment',
        'Foreignrelations',
        'Gdp',
        'Genderequality',
        'Generationalwealthgap',
        'Health',
        'Tobaccouse',
        'Healthcaredemand',
        'Humandevelopment',
        'Immigration',
        'Illegalimmigration',
        'Industrialautomation',
        'Inflation',
        'Internationaltrade',
        'Internetcurrencyadoption',
        'Internetspeed',
        'Legaldrugconsumption',
        'Lifespan',
        'Oildemand',
        'Oilprice',
        'Oilsupply',
        'Population',
        'Povertyrate',
        'Privateenergy',
        'Privatehealthcare',
        'Privatehousing',
        'Privatepensions',
        'Privaterail',
        'Privateschools',
        'Privatetelecoms',
        'Privatewater',
        'RailUsage',
        'Stability',
        'Technology',
        'Tourism',
        'Trafficcongestion',
        'Unemployment',
        'Veganism',
        'Violentcrimerate',
        'Wages',
        'Workerproductivity',
        'Workingweek',
        'Rareearthprice',
        'Mentalhealth'
        ]]  

    target = df[parameter]

    print("Start training")
    model = RandomForestRegressor(n_estimators=20)

    print("Start fit")
    start_time = time.time()
    model.fit(features, target)
    end_time = time.time()

    print("Start predicting")
    predicted_effects = model.predict(features)

    print(predicted_effects)

    if min_max == "min":
        best_policy_index = np.argmin(predicted_effects) 
    else:
        best_policy_index = np.argmax(predicted_effects)  


    print(best_policy_index)

    # Get the best policy parameters
    best_policy_parameters = predicted_effects[best_policy_index]

    # Print out the best policy parameters
    print("Best policy parameters:", best_policy_parameters)
    print("Time took:", end_time - start_time)

    best_policy_row = df.iloc[best_policy_index]
    print("Best policy combination set:")
    print(best_policy_row)

    finished_policy_dict = {}#209
    finished_popularity_dict = {}#124
    finished_indicator_dict = {} #71

    count_1 = 0
    count_2 = 0
    count_3 = 0

    # Iterate through the row and selectively add values to each dictionary
    for column_name, value in best_policy_row.items():
        if count_1 < 208:
            finished_policy_dict[column_name] = value
            count_1 += 1
        elif count_2 < 118:
            finished_popularity_dict[column_name] = value
            count_2 += 1
        else:
            finished_indicator_dict[column_name] = value
            count_3 += 1

    return finished_policy_dict, finished_popularity_dict, finished_indicator_dict

